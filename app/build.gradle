apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'

def flavor
def buildType

def static releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

def loadSigningConfigs() {
    def Properties props = new Properties()
    def propFile = file('../signing.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))
        if (props != null
                && props.containsKey('RELEASE_STORE_FILE')
                && props.containsKey('RELEASE_STORE_PASSWORD')
                && props.containsKey('RELEASE_KEY_ALIAS')
                && props.containsKey('RELEASE_KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['RELEASE_STORE_FILE'])
            android.signingConfigs.release.storePassword = props['RELEASE_STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['RELEASE_KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['RELEASE_KEY_PASSWORD']
        } else {
            android.buildTypes.release.signingConfig = null
        }
    } else {
        android.buildTypes.release.signingConfig = null
    }
}

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "th.co.bps.kbank_generic"
        minSdkVersion 22 // android 7.1.1
        targetSdkVersion 29
        versionCode 1
        versionName "1.0.0.00000"
        ndk {
            abiFilters 'armeabi'
        }
    }
    applicationVariants.all { variant ->
        buildType = variant.buildType.name // Sets the current build type
        flavor = variant.flavorName
        if (flavor == "standard") {
            if (buildType == "debug") {
                resValue "string", "app_key_standard_debug", '" "'
                resValue "string", "app_secret_standard_debug", '" "'
            } else {
                resValue "string", "app_key_standard_release", '"BE6PL570ZSM0KRPQED6N"'
                resValue "string", "app_secret_standard_release", '"HZI1FZFVJV990YE74QL27M1ZNN6BKRUWVOYSPW1V"'
            }
        } else if (flavor == "sandBox") {
            if (buildType == "debug") {
                resValue "string", "app_key_sandBox_debug", '" "'
                resValue "string", "app_secret_sandBox_debug", '" "'
            } else {
                resValue "string", "app_key_sandBox_release", '"GGV4TU0OSIA5NO28EX0N"'
                resValue "string", "app_secret_sandBox_release", '"1O9FNHG4MV4NS5TPAY4JB9G1U6SVPFJ2NMNYE88V"'
            }
        } else {
            //auto test
            if (buildType == "debug") {
                resValue "string", "app_key_autoTest_debug", '" "'
                resValue "string", "app_secret_autoTest_debug", '" "'
            } else {
                resValue "string", "app_key_autoTest_release", '" "'
                resValue "string", "app_secret_autoTest_release", '" "'
            }
        }
    }

    lintOptions {
        // checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
        disable 'MissingTranslation'
        disable 'Deprecation'
        disable 'Unchecked'
    }

    //签名
    signingConfigs {
        debug {
        }
        release {
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            //applicationIdSuffix ".debug"
            //buildType = debug
        }
        release {
            //buildConfigField "boolean", "LOG_DEBUG", "true"
            //debuggable="true"
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //applicationIdSuffix ".release"
            loadSigningConfigs()

            //签名
            signingConfig signingConfigs.release

            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    if (outputFileName != null && outputFile.name.endsWith('.apk')) {
                        def type = ""
                        if (variant.buildType.name == 'debug') {
                            type = "_debug"
                        }
                        def fileName = "KBANK-Generic_V${defaultConfig.versionName}${type}.apk"
                        outputFileName = fileName
                    }
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "test"

    productFlavors {
        standard {
            manifestPlaceholders = [APP_NAME: "@string/app_name"]
            dimension "test"
            flavor = "standard"
        }
        sandBox {
            applicationId "th.co.bps.kbank_generic.sandbox"
            manifestPlaceholders = [APP_NAME: "@string/app_name_sandbox"]
            dimension "test"
        }
    }

    packagingOptions {
        pickFirst("META-INF/atomicfu.kotlin_module")
    }
}

repositories {
    flatDir {
        dirs '../sdkwrapper/libs', 'libs'
    }
//    mavenCentral()
}

dependencies {
//    implementation 'com.android.support:support-v4:25.4.0'
//    implementation 'com.android.support:design:25.4.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.1"
    api fileTree(include: '*.jar', dir: 'libs')
    implementation 'cn.bingoogolapple:bga-banner:2.1.7'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'com.j256.ormlite:ormlite-core:5.0'
    implementation 'com.j256.ormlite:ormlite-android:5.0'
    implementation files('libs\\bps-amex-api.jar')
    implementation files('libs\\bps-scb-api.jar')
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    implementation 'com.alibaba:fastjson:1.2.33'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation project(':sdkwrapper')
    implementation project(':eemv')
    implementation project(':glwrapper')
    implementation project(':expandablerecyclerview')
    implementation project(':opensdk')
    implementation project(':appstore')
    implementation project(':sdk')
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'
    implementation 'io.reactivex.rxjava2:rxjava:2.0.2'
    implementation 'commons-codec:commons-codec:1.9'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
    implementation 'com.github.tony19:timber-loggly:1.0.1'
    implementation 'de.mindpipe.android:android-logging-log4j:1.0.3'
    implementation 'log4j:log4j:1.2.17'
    implementation 'org.apache.commons:commons-lang3:3.4'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    //wechat scan
    implementation project(path: ':opencv')
    implementation project(path: ':opencv-armv7a')
    implementation 'com.github.jenly1314.WeChatQRCode:wechat-qrcode:1.1.1'
    implementation 'com.github.jenly1314.WeChatQRCode:wechat-qrcode-scanning:1.1.1'
    implementation 'com.github.jenly1314.MLKit:mlkit-camera-core:1.0.3'
}

